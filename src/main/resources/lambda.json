{
  "packages": [
    {
      "name": "nextgen.lambda.domain.actions",
      "interfaces": [
        {
          "name": "Task",
          "typeParameters": [
            "T"
          ],
          "annotations": [
            {
              "name": "FunctionalInterface"
            }
          ],
          "members": [
            {
              "name": "run",
              "throws": [
                "Throwable"
              ],
              "type": "T"
            }
          ]
        }
      ]
    },
    {
      "name": "nextgen.lambda.domain.core",
      "entities": [
        {
          "name": "Model",
          "constructors": [
            {
              "parameters": [
                {
                  "name": "path",
                  "type": "String"
                }
              ],
              "statements": [
                "this.path = path;"
              ]
            }
          ],
          "fields": [
            {
              "name": "path",
              "type": "String"
            },
            {
              "name": "delegate",
              "type": "io.vertx.core.json.JsonObject"
            }
          ],
          "methods": [
            {
              "name": "packages",
              "type": "java.util.stream.Stream<Package>",
              "elementType": "Package",
              "statements": [
                "return delegate.getJsonArray(\"packages\", new io.vertx.core.json.JsonArray())\n         .stream()\n         .map(element -> (io.vertx.core.json.JsonObject) element)\n         .map(Package::new);"
              ]
            }
          ]
        },
        {
          "name": "Package",
          "constructors": [
            {
              "parameters": [
                {
                  "name": "delegate",
                  "type": "io.vertx.core.json.JsonObject"
                }
              ],
              "statements": [
                "this.delegate = delegate;"
              ]
            }
          ],
          "fields": [
            {
              "name": "delegate",
              "type": "io.vertx.core.json.JsonObject"
            }
          ],
          "methods": [
            {
              "name": "name",
              "type": "String",
              "statements": [
                "return delegate.getString(\"name\");"
              ]
            },
            {
              "name": "entities",
              "type": "java.util.stream.Stream<Entity>",
              "elementType": "Entity",
              "statements": [
                "return delegate.getJsonArray(\"entities\", new io.vertx.core.json.JsonArray())\n         .stream()\n         .map(element -> (io.vertx.core.json.JsonObject) element)\n         .map(Entity::new);"
              ]
            },
            {
              "name": "enums",
              "type": "java.util.stream.Stream<Enum>",
              "elementType": "Enum",
              "statements": [
                "return delegate.getJsonArray(\"enums\", new io.vertx.core.json.JsonArray())\n         .stream()\n         .map(element -> (io.vertx.core.json.JsonObject) element)\n         .map(Enum::new);"
              ]
            },
            {
              "name": "interfaces",
              "type": "java.util.stream.Stream<Interface>",
              "elementType": "Interface",
              "statements": [
                "return delegate.getJsonArray(\"interfaces\", new io.vertx.core.json.JsonArray())\n         .stream()\n         .map(element -> (io.vertx.core.json.JsonObject) element)\n         .map(Interface::new);"
              ]
            }
          ]
        },
        {
          "name": "Enum",
          "constructors": [
            {
              "parameters": [
                {
                  "name": "delegate",
                  "type": "io.vertx.core.json.JsonObject"
                }
              ],
              "statements": [
                "this.delegate = delegate;"
              ]
            }
          ],
          "fields": [
            {
              "name": "delegate",
              "type": "io.vertx.core.json.JsonObject"
            }
          ],
          "methods": [
            {
              "name": "name",
              "type": "String",
              "statements": [
                "return delegate.getString(\"name\");"
              ]
            },
            {
              "name": "values",
              "type": "String",
              "statements": [
                "return delegate.getString(\"values\");"
              ]
            }
          ]
        },
        {
          "name": "Interface",
          "constructors": [
            {
              "parameters": [
                {
                  "name": "delegate",
                  "type": "io.vertx.core.json.JsonObject"
                }
              ],
              "statements": [
                "this.delegate = delegate;"
              ]
            }
          ],
          "fields": [
            {
              "name": "delegate",
              "type": "io.vertx.core.json.JsonObject"
            }
          ],
          "methods": [
            {
              "name": "name",
              "type": "String",
              "statements": [
                "return delegate.getString(\"name\");"
              ]
            },
            {
              "name": "members",
              "type": "java.util.stream.Stream<Method>",
              "elementType": "Method",
              "statements": [
                "return delegate.getJsonArray(\"members\", new io.vertx.core.json.JsonArray())\n         .stream()\n         .map(element -> (io.vertx.core.json.JsonObject) element)\n         .map(Method::new);"
              ]
            }
          ]
        },
        {
          "name": "Entity",
          "constructors": [
            {
              "parameters": [
                {
                  "name": "delegate",
                  "type": "io.vertx.core.json.JsonObject"
                }
              ],
              "statements": [
                "this.delegate = delegate;"
              ]
            }
          ],
          "fields": [
            {
              "name": "delegate",
              "type": "io.vertx.core.json.JsonObject"
            }
          ],
          "methods": [
            {
              "name": "name",
              "type": "String",
              "statements": [
                "return delegate.getString(\"name\");"
              ]
            },
            {
              "name": "fields",
              "type": "java.util.stream.Stream<Field>",
              "elementType": "Field",
              "statements": [
                "return delegate.getJsonArray(\"fields\", new io.vertx.core.json.JsonArray())\n         .stream()\n         .map(element -> (io.vertx.core.json.JsonObject) element)\n         .map(Field::new);"
              ]
            },
            {
              "name": "methods",
              "type": "java.util.stream.Stream<Method>",
              "elementType": "Method",
              "statements": [
                "return delegate.getJsonArray(\"methods\", new io.vertx.core.json.JsonArray())\n         .stream()\n         .map(element -> (io.vertx.core.json.JsonObject) element)\n         .map(Method::new);"
              ]
            }
          ]
        },
        {
          "name": "Field",
          "constructors": [
            {
              "parameters": [
                {
                  "name": "delegate",
                  "type": "io.vertx.core.json.JsonObject"
                }
              ],
              "statements": [
                "this.delegate = delegate;"
              ]
            }
          ],
          "fields": [
            {
              "name": "delegate",
              "type": "io.vertx.core.json.JsonObject"
            }
          ],
          "methods": [
            {
              "name": "name",
              "type": "String",
              "statements": [
                "return delegate.getString(\"name\");"
              ]
            },
            {
              "name": "type",
              "type": "String",
              "statements": [
                "return delegate.getString(\"type\");"
              ]
            }
          ]
        },
        {
          "name": "Method",
          "constructors": [
            {
              "parameters": [
                {
                  "name": "delegate",
                  "type": "io.vertx.core.json.JsonObject"
                }
              ],
              "statements": [
                "this.delegate = delegate;"
              ]
            }
          ],
          "fields": [
            {
              "name": "delegate",
              "type": "io.vertx.core.json.JsonObject"
            }
          ],
          "methods": [
            {
              "name": "name",
              "type": "String",
              "statements": [
                "return delegate.getString(\"name\");"
              ]
            },
            {
              "name": "type",
              "type": "String",
              "statements": [
                "return delegate.getString(\"type\");"
              ]
            },
            {
              "name": "parameters",
              "type": "java.util.stream.Stream<Parameter>",
              "elementType": "Parameter",
              "statements": [
                "return delegate.getJsonArray(\"packages\", new io.vertx.core.json.JsonArray())\n         .stream()\n         .map(element -> (io.vertx.core.json.JsonObject) element)\n         .map(Parameter::new);"
              ]
            },
            {
              "name": "statements",
              "type": "java.util.stream.Stream<Statement>",
              "elementType": "Statement",
              "statements": [
                "return delegate.getJsonArray(\"packages\", new io.vertx.core.json.JsonArray())\n         .stream()\n         .map(element -> (io.vertx.core.json.JsonObject) element)\n         .map(Statement::new);"
              ]
            }
          ]
        },
        {
          "name": "Parameter",
          "constructors": [
            {
              "parameters": [
                {
                  "name": "delegate",
                  "type": "io.vertx.core.json.JsonObject"
                }
              ],
              "statements": [
                "this.delegate = delegate;"
              ]
            }
          ],
          "fields": [
            {
              "name": "delegate",
              "type": "io.vertx.core.json.JsonObject"
            }
          ],
          "methods": [
            {
              "name": "name",
              "type": "String",
              "statements": [
                "return delegate.getString(\"name\");"
              ]
            },
            {
              "name": "type",
              "type": "String",
              "statements": [
                "return delegate.getString(\"type\");"
              ]
            }
          ]
        },
        {
          "name": "Statement",
          "constructors": [
            {
              "parameters": [
                {
                  "name": "delegate",
                  "type": "io.vertx.core.json.JsonObject"
                }
              ],
              "statements": [
                "this.delegate = delegate;"
              ]
            }
          ],
          "fields": [
            {
              "name": "delegate",
              "type": "io.vertx.core.json.JsonObject"
            }
          ],
          "methods": [
            {
              "name": "expression",
              "type": "String",
              "statements": [
                "return delegate.getString(\"expression\");"
              ]
            },
            {
              "name": "name",
              "type": "String",
              "statements": [
                "return delegate.getString(\"name\");"
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "nextgen.lambda.domain.maven",
      "entities": [
        {
          "name": "Project",
          "fields": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "root",
              "type": "String"
            }
          ],
          "constructors": [
            {
              "parameters": [
                {
                  "name": "name",
                  "type": "String"
                },
                {
                  "name": "root",
                  "type": "String"
                }
              ],
              "statements": [
                "this.name = name;",
                "this.root = root;"
              ]
            }
          ],
          "methods": [
            {
              "name": "name",
              "type": "String",
              "statements": [
                "return this.name;"
              ]
            },
            {
              "name": "root",
              "type": "String",
              "statements": [
                "return this.root;"
              ]
            },
            {
              "name": "srcMain",
              "type": "String",
              "statements": [
                "return root + java.io.File.separator + \"src/main\";"
              ]
            },
            {
              "name": "srcMainJava",
              "type": "String",
              "statements": [
                "return srcMain() + java.io.File.separator + \"java\";"
              ]
            },
            {
              "name": "srcMainResources",
              "type": "String",
              "statements": [
                "return srcMain() + java.io.File.separator + \"resources\";"
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "nextgen.lambda.domain.os",
      "entities": [
        {
          "name": "OS"
        },
        {
          "name": "Directory"
        },
        {
          "name": "File"
        }
      ]
    },
    {
      "name": "nextgen.lambda.domain.graph",
      "entities": [
        {
          "name": "Graph"
        },
        {
          "name": "Node"
        },
        {
          "name": "Relation"
        },
        {
          "name": "Visitor"
        }
      ]
    },
    {
      "name": "nextgen.lambda.domain.templates",
      "enums": [
        {
          "name": "TemplateParameterQty",
          "values": [
            "ONE",
            "MANY"
          ]
        }
      ],
      "entities": [
        {
          "name": "TemplateGroup",
          "fields": [
            {
              "name": "delegate",
              "type": "io.vertx.core.json.JsonObject"
            },
            {
              "name": "stGroup",
              "type": "org.stringtemplate.v4.STGroup"
            }
          ],
          "constructors": [
            {
              "parameters": [
                {
                  "name": "delegate",
                  "type": "io.vertx.core.json.JsonObject"
                }
              ],
              "statements": [
                "this.delegate = delegate;",
                "this.stGroup = new org.stringtemplate.v4.STGroupString(name(), toSTG(), '~', '~');"
              ]
            }
          ],
          "methods": [
            {
              "name": "name",
              "type": "String",
              "statements": [
                "return delegate.getString(\"name\");"
              ]
            },
            {
              "name": "templates",
              "type": "java.util.stream.Stream<Template>",
              "elementType": "Template",
              "statements": [
                "return delegate.getJsonArray(\"templates\", new io.vertx.core.json.JsonArray())\n         .stream()\n         .map(element -> (io.vertx.core.json.JsonObject) element)\n         .map(Template::new);"
              ]
            },
            {
              "name": "stGroup",
              "type": "org.stringtemplate.v4.STGroup",
              "statements": [
                "return stGroup;"
              ]
            },
            {
              "name": "toSTG",
              "type": "String",
              "statements": [
                "final String stg = \"delimiters \\\"~\\\", \\\"~\\\"\" +\n   \"\\n\\ngt() ::= \\\">\\\"\" +\n   \"\\n\\neot() ::= <<~gt()~~gt()~>>\" +\n   \"\\n\\nSTGroupTemplate(DELIMITER,TEMPLATES) ::= <<delimiters \\\"~DELIMITER~\\\",\\\"~DELIMITER~\\\"\" +\n   \"\\n\\n~TEMPLATES:{it|~it~};separator=\\\"\\\\n\\\\n\\\"~\" +\n   \"\\n\\neom() ::= \\\"}\\\"\" +\n   \"\\n\\ngt() ::= \\\">\\\"\" +\n   \"\\n\\n>>\" +\n   \"\\n\\nSTTemplate(CONTENT,NAME,PARAMS) ::= <<~NAME~(~PARAMS:{it|~it~};separator=\\\",\\\"~) ::= <<~CONTENT~ ~eot()~>>\";\n\nfinal org.stringtemplate.v4.STGroup templateGroup = new org.stringtemplate.v4.STGroupString(name(), stg, '~', '~');\nfinal org.stringtemplate.v4.ST stGroupTemplate = templateGroup.getInstanceOf(\"STGroupTemplate\");\nstGroupTemplate.add(\"DELIMITER\", \"~\");\n\ntemplates()\n   .filter(template -> !template.name().equals(\"eom\"))\n   .filter(template -> !template.name().equals(\"gt\"))\n   .forEach(template -> {\n      final org.stringtemplate.v4.ST stTemplate = templateGroup.getInstanceOf(\"STTemplate\");\n      stTemplate.add(\"NAME\", template.name());\n      stTemplate.add(\"CONTENT\", template.content());\n      template.parameters().forEach(parameter -> stTemplate.add(\"PARAMS\", parameter.name()));\n      stGroupTemplate.add(\"TEMPLATES\", stTemplate);\n   });\n\nfinal org.stringtemplate.v4.STGroup stGroup = new org.stringtemplate.v4.STGroupString(name(), stGroupTemplate.render(), '~', '~');\nstGroup.registerRenderer(Object.class, (o, formatString, locale) -> {\n\n   final String text = o.toString();\n   if (formatString == null) return text;\n\n   final int length = text.length();\n   final int lastIndex = text.lastIndexOf(\".\");\n\n   switch (formatString) {\n      case \"sn\":\n      case \"simpleName\":\n         if (lastIndex == -1) return text;\n         return text.substring(lastIndex + 1);\n      case \"cap\":\n      case \"capitalize\":\n         return Character.toUpperCase(text.charAt(0)) + (length > 1 ? text.substring(1) : \"\");\n      case \"tu\":\n      case \"toUpper\":\n         return text.toUpperCase();\n      case \"lf\":\n      case \"lowFirst\":\n         return Character.toLowerCase(text.charAt(0)) + (length > 1 ? text.substring(1) : \"\");\n      case \"tl\":\n      case \"toLower\":\n         return text.toLowerCase();\n      default:\n         return o.toString();\n   }\n});\n\nreturn stGroupTemplate.render();"
              ]
            }
          ]
        },
        {
          "name": "Template",
          "fields": [
            {
              "name": "delegate",
              "type": "io.vertx.core.json.JsonObject"
            }
          ],
          "constructors": [
            {
              "parameters": [
                {
                  "name": "delegate",
                  "type": "io.vertx.core.json.JsonObject"
                }
              ],
              "statements": [
                "this.delegate = delegate;"
              ]
            }
          ],
          "methods": [
            {
              "name": "name",
              "type": "String",
              "statements": [
                "return delegate.getString(\"name\");"
              ]
            },
            {
              "name": "content",
              "type": "String",
              "statements": [
                "return delegate.getString(\"content\");"
              ]
            },
            {
              "name": "parameters",
              "type": "java.util.stream.Stream<TemplateParameter>",
              "elementType": "TemplateParameter",
              "statements": [
                "return delegate.getJsonArray(\"parameters\", new io.vertx.core.json.JsonArray())\n         .stream()\n         .map(element -> (io.vertx.core.json.JsonObject) element)\n         .map(TemplateParameter::new);"
              ]
            }
          ]
        },
        {
          "name": "TemplateParameter",
          "fields": [
            {
              "name": "delegate",
              "type": "io.vertx.core.json.JsonObject"
            }
          ],
          "constructors": [
            {
              "parameters": [
                {
                  "name": "delegate",
                  "type": "io.vertx.core.json.JsonObject"
                }
              ],
              "statements": [
                "this.delegate = delegate;"
              ]
            }
          ],
          "methods": [
            {
              "name": "name",
              "type": "String",
              "statements": [
                "return delegate.getString(\"name\");"
              ]
            },
            {
              "name": "qty",
              "type": "String",
              "statements": [
                "return delegate.getString(\"qty\");"
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "nextgen.lambda.domain.ui",
      "entities": [
        {
          "name": "UI",
          "extends": "javax.swing.JFrame",
          "fields": [
            {
              "name": "navigator",
              "type": "Navigator"
            },
            {
              "name": "canvas",
              "type": "Canvas"
            },
            {
              "name": "editor",
              "type": "Editor"
            }
          ],
          "methods": [
            {
              "name": "showUI",
              "parameters": [
                {
                  "name": "onClose",
                  "type": "Runnable"
                }
              ],
              "statements": [
                "final java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();\nfinal java.awt.Dimension preferredSize = new java.awt.Dimension(800, 768);\nsetMinimumSize(preferredSize);\nsetPreferredSize(preferredSize);\nsetMaximumSize(screenSize);\nsetSize(preferredSize);",
                "final javax.swing.JPanel contentPanel = new javax.swing.JPanel(new java.awt.BorderLayout());\ncontentPanel.add(navigator, java.awt.BorderLayout.WEST);\ncontentPanel.add(canvas, java.awt.BorderLayout.CENTER);\ncontentPanel.add(editor, java.awt.BorderLayout.EAST);\ngetContentPane().add(contentPanel, java.awt.BorderLayout.CENTER);",
                "addWindowListener(new java.awt.event.WindowAdapter() {\n   @Override\n   public void windowClosed(java.awt.event.WindowEvent e) {\n      onClose.run();\n   }\n});",
                "javax.swing.SwingUtilities.invokeLater(() -> { pack(); setLocationByPlatform(true); setVisible(true); });"
              ]
            }
          ]
        },
        {
          "name": "Navigator",
          "extends": "javax.swing.JTree",
          "constructors": [
            {
              "parameters": [
                {
                  "name": "model",
                  "type": "io.vertx.core.Vertx"
                }
              ],
              "statements": [
                "setModel(new javax.swing.tree.DefaultTreeModel(root = new NavigatorTreeNode(this, model)));",
                "addMouseListener(new java.awt.event.MouseAdapter() {\n   @Override\n   public void mouseClicked(java.awt.event.MouseEvent e) {\n\n      final javax.swing.tree.TreePath selectionPath = getPathForLocation(e.getX(), e.getY());\n      if (selectionPath == null) return;\n\n      final nextgen.lambda.domain.ui.NavigatorTreeNode selected = (nextgen.lambda.domain.ui.NavigatorTreeNode) selectionPath.getLastPathComponent();\n\n      if (javax.swing.SwingUtilities.isRightMouseButton(e)) {\n         final javax.swing.JPopupMenu popupMenu = new javax.swing.JPopupMenu();\n         selected.actions().forEach(popupMenu::add);\n         if (popupMenu.getComponentCount() != 0) javax.swing.SwingUtilities.invokeLater(() -> popupMenu.show(nextgen.lambda.domain.ui.Navigator.this, e.getX(), e.getY()));\n      }\n   }\n});"
              ]
            }
          ],
          "fields": [
            {
              "name": "root",
              "type": "NavigatorTreeNode"
            }
          ]
        },
        {
          "name": "NavigatorTreeNode",
          "extends": "javax.swing.tree.DefaultMutableTreeNode",
          "fields": [
            {
              "name": "icon",
              "type": "javax.swing.Icon"
            },
            {
              "name": "tooltip",
              "type": "String"
            },
            {
              "name": "navigator",
              "type": "Navigator"
            }
          ],
          "constructors": [
            {
              "parameters": [
                {
                  "name": "navigator",
                  "type": "Navigator"
                },
                {
                  "name": "model",
                  "type": "Object"
                }
              ],
              "statements": [
                "super(model);",
                "this.navigator = navigator;"
              ]
            }
          ],
          "methods": [
            {
              "name": "actions",
              "type": "java.util.Collection<Action>",
              "statements": [
                "return java.util.Collections.emptyList();"
              ]
            },
            {
              "name": "treeModel",
              "type": "javax.swing.tree.DefaultTreeModel",
              "statements": [
                "return (javax.swing.tree.DefaultTreeModel) navigator.getModel();"
              ]
            },
            {
              "name": "addModel",
              "parameters": [
                {
                  "name": "model",
                  "type": "Object"
                }
              ],
              "statements": [
                "final NavigatorTreeNode child = new NavigatorTreeNode(navigator, model);\n\nint n = getChildCount();\n\nif (n == 0) {\n\tadd(child);\n\ttreeModel().nodesWereInserted(this, new int[]{n});\n\treturn;\n}\n\nfor (int i = 0; i < n; i++) {\n\tfinal NavigatorTreeNode node = (NavigatorTreeNode) getChildAt(i);\n\tif (node.getUserObject().toString().compareTo(child.getUserObject().toString()) > 0) {\n\t\tinsert(child, i);\n\t\ttreeModel().nodesWereInserted(this, new int[]{i});\n\t\treturn;\n\t}\n}\n\nadd(child);\ntreeModel().nodesWereInserted(this, new int[]{n});"
              ]
            }
          ]
        },
        {
          "name": "CanvasElement",
          "extends": "org.piccolo2d.PNode"
        },
        {
          "name": "SelectEventsHandler",
          "extends": "org.piccolo2d.event.PBasicInputEventHandler"
        },
        {
          "name": "CanvasZoomHandler",
          "extends": "org.piccolo2d.event.PBasicInputEventHandler"
        },
        {
          "name": "CanvasEventHandler",
          "extends": "org.piccolo2d.event.PBasicInputEventHandler"
        },
        {
          "name": "Canvas",
          "extends": "org.piccolo2d.PCanvas",
          "fields": [
            {
              "name": "ui",
              "type": "UI"
            },
            {
              "name": "elements",
              "type": "java.util.Map<Object, CanvasElement>",
              "init": "new java.util.concurrent.ConcurrentHashMap<>()"
            },
            {
              "name": "selectEventHandler",
              "type": "SelectEventsHandler",
              "init": "new SelectEventsHandler()"
            },
            {
              "name": "canvasZoomHandler",
              "type": "CanvasZoomHandler",
              "init": "new CanvasZoomHandler()"
            },
            {
              "name": "canvasEventHandler",
              "type": "CanvasEventHandler",
              "init": "new CanvasEventHandler()"
            },
            {
              "name": "highlightedColor",
              "type": "java.awt.Color",
              "init": "java.awt.Color.decode(\"#fdbf6f\")"
            },
            {
              "name": "selectedColor",
              "type": "java.awt.Color",
              "init": "java.awt.Color.decode(\"#ff7f00\")"
            }
          ],
          "constructors": [
            {
              "parameters": [
                {
                  "name": "ui",
                  "type": "UI"
                }
              ],
              "statements": [
                "this.ui = ui;",
                "setBackground(java.awt.Color.DARK_GRAY);"
              ]
            }
          ]
        },
        {
          "name": "Editor",
          "extends": "javax.swing.JPanel",
          "fields": [
            {
              "name": "ui",
              "type": "UI"
            }
          ],
          "constructors": [
            {
              "parameters": [
                {
                  "name": "ui",
                  "type": "UI"
                }
              ],
              "statements": [
                "this.ui = ui;",
                "setBackground(java.awt.Color.DARK_GRAY);"
              ]
            }
          ]
        },
        {
          "name": "Action",
          "extends": "javax.swing.AbstractAction",
          "fields": [
            {
              "name": "task",
              "type": "nextgen.lambda.domain.actions.Task"
            }
          ],
          "constructors": [
            {
              "parameters": [
                {
                  "name": "name",
                  "type": "String"
                },
                {
                  "name": "task",
                  "type": "nextgen.lambda.domain.actions.Task"
                }
              ],
              "statements": [
                "super(name);",
                "this.task = task;"
              ]
            }
          ],
          "methods": [
            {
              "name": "actionPerformed",
              "annotations": [
                {
                  "name": "Override"
                }
              ],
              "parameters": [
                {
                  "name": "event",
                  "type": "java.awt.event.ActionEvent"
                }
              ],
              "statements": [
                "try {\n\ttask.run();\n} catch (Throwable e) {\n\tthrow new RuntimeException(e);\n}"
              ]
            }
          ]
        }
      ]
    }
  ]
}